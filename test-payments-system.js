const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testPaymentsSystem() {
  console.log('üîç Test du Syst√®me de Paiement Am√©lior√©\n');

  try {
    // 1. Test de r√©cup√©ration des informations de paiement d'un √©tudiant
    console.log('1Ô∏è‚É£ Test de r√©cup√©ration des informations de paiement...');
    const studentId = 68; // Mehdi El Abed
    const paymentResponse = await fetch(`http://localhost:3000/api/payments?studentId=${studentId}`);
    
    if (!paymentResponse.ok) {
      const errorText = await paymentResponse.text();
      console.log('Erreur d√©taill√©e:', errorText);
      throw new Error(`Erreur HTTP: ${paymentResponse.status} ${paymentResponse.statusText}`);
    }
    
    const paymentData = await paymentResponse.json();
    console.log('‚úÖ Informations de paiement r√©cup√©r√©es avec succ√®s');
    console.log(`   √âtudiant: ${paymentData.fullName}`);
    console.log(`   S√©ances pay√©es: ${paymentData.paidSessions}`);
    console.log(`   S√©ances non pay√©es: ${paymentData.unpaidSessions}`);
    console.log(`   Total s√©ances: ${paymentData.totalSessions}`);
    console.log(`   Solde: ${paymentData.balance}`);

    // 2. Test de paiement de s√©ances
    console.log('\n2Ô∏è‚É£ Test de paiement de s√©ances...');
    const sessionsToPay = 1;
    const payResponse = await fetch('http://localhost:3000/api/payments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        studentId: studentId,
        paidSessions: sessionsToPay
      }),
    });

    if (payResponse.ok) {
      const payData = await payResponse.json();
      console.log('‚úÖ Paiement effectu√© avec succ√®s');
      console.log(`   Message: ${payData.message}`);
      console.log(`   S√©ances non pay√©es restantes: ${payData.remainingUnpaid}`);
    } else {
      const errorData = await payResponse.json();
      console.log('‚ùå Erreur lors du paiement:', errorData.error);
    }

    // 3. Test d'action admin - Ajouter des s√©ances non pay√©es
    console.log('\n3Ô∏è‚É£ Test d\'action admin - Ajouter des s√©ances non pay√©es...');
    const addUnpaidResponse = await fetch('http://localhost:3000/api/payments', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        studentId: studentId,
        action: 'add_unpaid',
        sessions: 2
      }),
    });

    if (addUnpaidResponse.ok) {
      const addUnpaidData = await addUnpaidResponse.json();
      console.log('‚úÖ S√©ances non pay√©es ajout√©es avec succ√®s');
      console.log(`   Message: ${addUnpaidData.message}`);
    } else {
      const errorData = await addUnpaidResponse.json();
      console.log('‚ùå Erreur lors de l\'ajout:', errorData.error);
    }

    // 4. Test d'action admin - Retirer des s√©ances non pay√©es
    console.log('\n4Ô∏è‚É£ Test d\'action admin - Retirer des s√©ances non pay√©es...');
    const removeUnpaidResponse = await fetch('http://localhost:3000/api/payments', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        studentId: studentId,
        action: 'remove_unpaid',
        sessions: 1
      }),
    });

    if (removeUnpaidResponse.ok) {
      const removeUnpaidData = await removeUnpaidResponse.json();
      console.log('‚úÖ S√©ances non pay√©es retir√©es avec succ√®s');
      console.log(`   Message: ${removeUnpaidData.message}`);
    } else {
      const errorData = await removeUnpaidResponse.json();
      console.log('‚ùå Erreur lors du retrait:', errorData.error);
    }

    // 5. V√©rification finale
    console.log('\n5Ô∏è‚É£ V√©rification finale des informations de paiement...');
    const finalPaymentResponse = await fetch(`http://localhost:3000/api/payments?studentId=${studentId}`);
    
    if (finalPaymentResponse.ok) {
      const finalPaymentData = await finalPaymentResponse.json();
      console.log('‚úÖ Informations finales r√©cup√©r√©es');
      console.log(`   S√©ances pay√©es: ${finalPaymentData.paidSessions}`);
      console.log(`   S√©ances non pay√©es: ${finalPaymentData.unpaidSessions}`);
      console.log(`   Total s√©ances: ${finalPaymentData.totalSessions}`);
      console.log(`   Solde: ${finalPaymentData.balance}`);
    }

    console.log('\n‚úÖ Test du syst√®me de paiement termin√© avec succ√®s !');
    console.log('\nüéØ Fonctionnalit√©s test√©es :');
    console.log('   ‚úÖ R√©cup√©ration des informations de paiement');
    console.log('   ‚úÖ Paiement de s√©ances (d√©cr√©mentation automatique)');
    console.log('   ‚úÖ Actions admin - Ajouter des s√©ances non pay√©es');
    console.log('   ‚úÖ Actions admin - Retirer des s√©ances non pay√©es');
    console.log('   ‚úÖ Validation des donn√©es');
    console.log('\nüåê Interfaces √† tester :');
    console.log('   Admin Dashboard - Paiements: http://localhost:3000/dashboard/admin?tab=payments');
    console.log('   Parent Dashboard - Paiements: http://localhost:3000/dashboard/parent?tab=payments');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testPaymentsSystem();
