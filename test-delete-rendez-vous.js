const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testDeleteRendezVous() {
  console.log('üîß Test de Suppression de Rendez-vous\n');

  try {
    // 1. R√©cup√©rer la liste des rendez-vous existants
    console.log('1Ô∏è‚É£ R√©cup√©ration des rendez-vous existants...');
    const getResponse = await fetch('http://localhost:3000/api/rendez-vous');
    
    if (getResponse.ok) {
      const rendezVousList = await getResponse.json();
      console.log(`   ‚úÖ ${rendezVousList.length} rendez-vous trouv√©s`);
      
      if (rendezVousList.length === 0) {
        console.log('   ‚ö†Ô∏è Aucun rendez-vous √† supprimer. Test termin√©.');
        return;
      }
      
      // Prendre le premier rendez-vous pour le test
      const rendezVousToDelete = rendezVousList[0];
      console.log(`   üë§ Rendez-vous s√©lectionn√© pour suppression:`);
      console.log(`      ID: ${rendezVousToDelete.id}`);
      console.log(`      Parent: ${rendezVousToDelete.parent_name}`);
      console.log(`      Enfant: ${rendezVousToDelete.child_name}`);
      console.log(`      Date: ${rendezVousToDelete.timing}`);
      console.log(`      Statut: ${rendezVousToDelete.status}`);
    } else {
      console.log('   ‚ùå Erreur lors de la r√©cup√©ration des rendez-vous');
      return;
    }

    // 2. Test de suppression d'un rendez-vous
    console.log('\n2Ô∏è‚É£ Test de suppression de rendez-vous...');
    const rendezVousList = await getResponse.json();
    const rendezVousToDelete = rendezVousList[0];
    
    const deleteResponse = await fetch(`http://localhost:3000/api/rendez-vous?id=${rendezVousToDelete.id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (deleteResponse.ok) {
      const result = await deleteResponse.json();
      console.log('   ‚úÖ Rendez-vous supprim√© avec succ√®s !');
      console.log(`      Message: ${result.message}`);
      console.log(`      ID supprim√©: ${result.id}`);
    } else {
      const errorText = await deleteResponse.text();
      console.log('   ‚ùå Erreur lors de la suppression:');
      console.log(`      Status: ${deleteResponse.status}`);
      console.log(`      Message: ${errorText}`);
      return;
    }

    // 3. V√©rifier que le rendez-vous a bien √©t√© supprim√©
    console.log('\n3Ô∏è‚É£ V√©rification de la suppression...');
    const verifyResponse = await fetch('http://localhost:3000/api/rendez-vous');
    
    if (verifyResponse.ok) {
      const updatedList = await verifyResponse.json();
      const deletedRendezVous = updatedList.find(rdv => rdv.id === rendezVousToDelete.id);
      
      if (!deletedRendezVous) {
        console.log('   ‚úÖ Rendez-vous confirm√© comme supprim√© de la base de donn√©es');
        console.log(`   üìä Nombre de rendez-vous restants: ${updatedList.length}`);
      } else {
        console.log('   ‚ùå Le rendez-vous est toujours pr√©sent dans la base de donn√©es');
      }
    } else {
      console.log('   ‚ùå Erreur lors de la v√©rification');
    }

    // 4. Test de suppression d'un rendez-vous inexistant
    console.log('\n4Ô∏è‚É£ Test de suppression d\'un rendez-vous inexistant...');
    const fakeDeleteResponse = await fetch('http://localhost:3000/api/rendez-vous?id=99999', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (fakeDeleteResponse.status === 404) {
      const errorData = await fakeDeleteResponse.json();
      console.log('   ‚úÖ Gestion correcte du rendez-vous inexistant');
      console.log(`      Message: ${errorData.error}`);
    } else {
      console.log('   ‚ö†Ô∏è Comportement inattendu pour un rendez-vous inexistant');
      console.log(`      Status: ${fakeDeleteResponse.status}`);
    }

    // 5. Test de suppression sans ID
    console.log('\n5Ô∏è‚É£ Test de suppression sans ID...');
    const noIdDeleteResponse = await fetch('http://localhost:3000/api/rendez-vous', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (noIdDeleteResponse.status === 400) {
      const errorData = await noIdDeleteResponse.json();
      console.log('   ‚úÖ Gestion correcte de la suppression sans ID');
      console.log(`      Message: ${errorData.error}`);
    } else {
      console.log('   ‚ö†Ô∏è Comportement inattendu pour une suppression sans ID');
      console.log(`      Status: ${noIdDeleteResponse.status}`);
    }

    console.log('\n‚úÖ Test de suppression de rendez-vous termin√© !');
    console.log('\nüéØ R√©sum√© :');
    console.log('   ‚úÖ API DELETE fonctionne');
    console.log('   ‚úÖ Suppression effective en base de donn√©es');
    console.log('   ‚úÖ Gestion des erreurs (ID inexistant, ID manquant)');
    console.log('\nüåê Interface √† v√©rifier :');
    console.log('   Admin Dashboard - Rendez-vous: http://localhost:3000/dashboard/admin?tab=rendez-vous');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testDeleteRendezVous();
