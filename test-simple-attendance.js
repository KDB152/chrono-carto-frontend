const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testSimpleAttendance() {
  console.log('üîß Test de l\'API Attendance Simplifi√©e\n');

  try {
    // 1. Test de l'API attendance simplifi√©e
    console.log('1Ô∏è‚É£ Test de l\'API attendance...');
    const attendanceResponse = await fetch('http://localhost:3000/api/attendance');
    
    if (attendanceResponse.ok) {
      const attendanceData = await attendanceResponse.json();
      console.log('   ‚úÖ API attendance fonctionne !');
      console.log(`   üìä Nombre d'√©tudiants r√©cup√©r√©s: ${attendanceData.length}`);
      
      if (attendanceData.length > 0) {
        const firstStudent = attendanceData[0];
        console.log('   üë§ Premier √©tudiant:');
        console.log(`      Nom: ${firstStudent.first_name} ${firstStudent.last_name}`);
        console.log(`      Email: ${firstStudent.email}`);
        console.log(`      Classe: ${firstStudent.class_level}`);
        console.log(`      S√©ances pay√©es: ${firstStudent.paid_sessions || 0}`);
        console.log(`      S√©ances non pay√©es: ${firstStudent.unpaid_sessions || 0}`);
        console.log(`      Statut: ${firstStudent.is_active ? 'Actif' : 'Inactif'}`);
      }
    } else {
      const errorText = await attendanceResponse.text();
      console.log('   ‚ùå Erreur API attendance:');
      console.log(`      Status: ${attendanceResponse.status}`);
      console.log(`      Message: ${errorText}`);
    }

    // 2. Test avec filtre par classe
    console.log('\n2Ô∏è‚É£ Test avec filtre par classe...');
    const classFilterResponse = await fetch('http://localhost:3000/api/attendance?class=3√®me');
    
    if (classFilterResponse.ok) {
      const classFilterData = await classFilterResponse.json();
      console.log(`   ‚úÖ Filtre par classe fonctionne: ${classFilterData.length} √©tudiants en 3√®me`);
    } else {
      console.log('   ‚ùå Erreur avec filtre par classe');
    }

    // 3. Test avec filtre par nom
    console.log('\n3Ô∏è‚É£ Test avec filtre par nom...');
    const nameFilterResponse = await fetch('http://localhost:3000/api/attendance?name=Mayssa');
    
    if (nameFilterResponse.ok) {
      const nameFilterData = await nameFilterResponse.json();
      console.log(`   ‚úÖ Filtre par nom fonctionne: ${nameFilterData.length} √©tudiants trouv√©s`);
    } else {
      console.log('   ‚ùå Erreur avec filtre par nom');
    }

    // 4. Test de marquage de pr√©sence
    console.log('\n4Ô∏è‚É£ Test de marquage de pr√©sence...');
    const markPresentResponse = await fetch('http://localhost:3000/api/attendance', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        studentId: 68,
        date: new Date().toISOString().split('T')[0],
        isPresent: true
      })
    });

    if (markPresentResponse.ok) {
      const result = await markPresentResponse.json();
      console.log('   ‚úÖ Pr√©sence marqu√©e avec succ√®s !');
      console.log(`      Message: ${result.message}`);
    } else {
      const errorText = await markPresentResponse.text();
      console.log('   ‚ùå Erreur lors du marquage de pr√©sence:');
      console.log(`      Status: ${markPresentResponse.status}`);
      console.log(`      Message: ${errorText}`);
    }

    console.log('\n‚úÖ Test de l\'API simplifi√©e termin√© !');
    console.log('\nüéØ R√©sum√© :');
    console.log('   ‚úÖ API attendance simplifi√©e et fonctionnelle');
    console.log('   ‚úÖ Filtres par classe et nom op√©rationnels');
    console.log('   ‚úÖ Marquage de pr√©sence fonctionnel');
    console.log('\nüåê Interface √† v√©rifier :');
    console.log('   Admin Dashboard - Pr√©sence: http://localhost:3000/dashboard/admin?tab=attendance');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testSimpleAttendance();
