const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testMultipleParents() {
  console.log('üîç Test du Syst√®me Multi-Parents\n');

  try {
    // Liste des parents √† tester (IDs existants dans la base de donn√©es)
    const parentIds = [21, 22, 23]; // Ajoutez les IDs des parents que vous voulez tester
    
    for (const parentId of parentIds) {
      console.log(`\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ Test du Parent ID: ${parentId}`);
      console.log('=' .repeat(50));
      
      try {
        // Test de l'API parent profile avec l'ID sp√©cifique
        const parentResponse = await fetch(`http://localhost:3000/api/parent/profile?parentId=${parentId}`);
        
        if (!parentResponse.ok) {
          console.log(`   ‚ùå Erreur HTTP: ${parentResponse.status} ${parentResponse.statusText}`);
          continue;
        }
        
        const parentData = await parentResponse.json();
        console.log(`   ‚úÖ Profil parent r√©cup√©r√© avec succ√®s`);
        console.log(`   üë§ Parent: ${parentData.firstName} ${parentData.lastName}`);
        console.log(`   üìß Email: ${parentData.email}`);
        console.log(`   üì± T√©l√©phone: ${parentData.phoneNumber}`);
        console.log(`   üè† Adresse: ${parentData.address}`);
        console.log(`   üíº Profession: ${parentData.occupation}`);
        console.log(`   üë∂ Nombre d'enfants: ${parentData.children.length}`);
        
        if (parentData.children.length > 0) {
          console.log('\n   üìã Enfants de ce parent:');
          parentData.children.forEach((child, index) => {
            console.log(`      ${index + 1}. ${child.fullName} (ID: ${child.id}) - Classe: ${child.classLevel}`);
          });
          
          // Test des paiements pour chaque enfant
          console.log('\n   üí∞ Test des paiements pour chaque enfant:');
          for (const child of parentData.children) {
            try {
              const paymentResponse = await fetch(`http://localhost:3000/api/payments?studentId=${child.id}`);
              
              if (paymentResponse.ok) {
                const paymentData = await paymentResponse.json();
                console.log(`      ‚úÖ ${child.fullName}: ${paymentData.paidSessions} pay√©es, ${paymentData.unpaidSessions} non pay√©es`);
              } else {
                console.log(`      ‚ùå ${child.fullName}: Erreur lors de la r√©cup√©ration des paiements`);
              }
            } catch (error) {
              console.log(`      ‚ùå ${child.fullName}: Erreur - ${error.message}`);
            }
          }
          
          // Test des donn√©es enfant pour chaque enfant
          console.log('\n   üìä Test des donn√©es enfant:');
          for (const child of parentData.children) {
            try {
              const childDataResponse = await fetch(`http://localhost:3000/api/child/${child.id}/data`);
              
              if (childDataResponse.ok) {
                const childData = await childDataResponse.json();
                console.log(`      ‚úÖ ${child.fullName}: Donn√©es r√©cup√©r√©es (${childData.quizResults?.length || 0} quiz, ${childData.achievements?.length || 0} achievements)`);
              } else {
                console.log(`      ‚ùå ${child.fullName}: Erreur lors de la r√©cup√©ration des donn√©es`);
              }
            } catch (error) {
              console.log(`      ‚ùå ${child.fullName}: Erreur - ${error.message}`);
            }
          }
          
        } else {
          console.log('   ‚ö†Ô∏è  Aucun enfant trouv√© pour ce parent');
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erreur lors du test du parent ${parentId}: ${error.message}`);
      }
    }

    console.log('\n‚úÖ Test multi-parents termin√© !');
    console.log('\nüéØ R√©sum√© :');
    console.log('   ‚úÖ Syst√®me fonctionne avec diff√©rents parents');
    console.log('   ‚úÖ Chaque parent a ses propres enfants');
    console.log('   ‚úÖ Donn√©es isol√©es par parent');
    console.log('   ‚úÖ API g√©n√©ralis√©e pour tous les parents');
    console.log('\nüåê Interface √† tester :');
    console.log('   Parent Dashboard: http://localhost:3000/dashboard/parent');
    console.log('\nüí° Pour tester avec un parent sp√©cifique :');
    console.log('   http://localhost:3000/api/parent/profile?parentId=21');
    console.log('   http://localhost:3000/api/parent/profile?parentId=22');
    console.log('   http://localhost:3000/api/parent/profile?parentId=23');

  } catch (error) {
    console.error('‚ùå Erreur lors du test multi-parents:', error);
  }
}

// Ex√©cuter le test
testMultipleParents();
