const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testModifySessions() {
  console.log('üîß Test de Modification Directe des S√©ances\n');

  try {
    // 1. R√©cup√©rer la liste des √©tudiants
    console.log('1Ô∏è‚É£ R√©cup√©ration des √©tudiants...');
    const getResponse = await fetch('http://localhost:3000/api/attendance');
    
    if (getResponse.ok) {
      const students = await getResponse.json();
      console.log(`   ‚úÖ ${students.length} √©tudiants trouv√©s`);
      
      if (students.length === 0) {
        console.log('   ‚ö†Ô∏è Aucun √©tudiant trouv√©. Test termin√©.');
        return;
      }
      
      const testStudent = students[0];
      console.log(`   üë§ √âtudiant s√©lectionn√© pour les tests:`);
      console.log(`      ID: ${testStudent.student_id}`);
      console.log(`      Nom: ${testStudent.first_name} ${testStudent.last_name}`);
      console.log(`      S√©ances pay√©es actuelles: ${testStudent.paid_sessions || 0}`);
      console.log(`      S√©ances non pay√©es actuelles: ${testStudent.unpaid_sessions || 0}`);

      // 2. Test de modification des s√©ances pay√©es
      console.log('\n2Ô∏è‚É£ Test de modification des s√©ances pay√©es...');
      const modifyPaidResponse = await fetch('http://localhost:3000/api/attendance', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          studentId: testStudent.student_id,
          action: 'set_paid_sessions',
          paidSessions: 5
        })
      });

      if (modifyPaidResponse.ok) {
        const result = await modifyPaidResponse.json();
        console.log('   ‚úÖ S√©ances pay√©es modifi√©es avec succ√®s !');
        console.log(`      Message: ${result.message}`);
      } else {
        const errorText = await modifyPaidResponse.text();
        console.log('   ‚ùå Erreur lors de la modification des s√©ances pay√©es:');
        console.log(`      Status: ${modifyPaidResponse.status}`);
        console.log(`      Message: ${errorText}`);
      }

      // 3. Test de modification des s√©ances non pay√©es
      console.log('\n3Ô∏è‚É£ Test de modification des s√©ances non pay√©es...');
      const modifyUnpaidResponse = await fetch('http://localhost:3000/api/attendance', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          studentId: testStudent.student_id,
          action: 'set_unpaid_sessions',
          unpaidSessions: 3
        })
      });

      if (modifyUnpaidResponse.ok) {
        const result = await modifyUnpaidResponse.json();
        console.log('   ‚úÖ S√©ances non pay√©es modifi√©es avec succ√®s !');
        console.log(`      Message: ${result.message}`);
      } else {
        const errorText = await modifyUnpaidResponse.text();
        console.log('   ‚ùå Erreur lors de la modification des s√©ances non pay√©es:');
        console.log(`      Status: ${modifyUnpaidResponse.status}`);
        console.log(`      Message: ${errorText}`);
      }

      // 4. Test de modification des deux types de s√©ances en m√™me temps
      console.log('\n4Ô∏è‚É£ Test de modification des deux types de s√©ances...');
      const modifyBothResponse = await fetch('http://localhost:3000/api/attendance', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          studentId: testStudent.student_id,
          action: 'set_both_sessions',
          paidSessions: 8,
          unpaidSessions: 2
        })
      });

      if (modifyBothResponse.ok) {
        const result = await modifyBothResponse.json();
        console.log('   ‚úÖ Les deux types de s√©ances modifi√©s avec succ√®s !');
        console.log(`      Message: ${result.message}`);
      } else {
        const errorText = await modifyBothResponse.text();
        console.log('   ‚ùå Erreur lors de la modification des deux types de s√©ances:');
        console.log(`      Status: ${modifyBothResponse.status}`);
        console.log(`      Message: ${errorText}`);
      }

      // 5. V√©rifier les modifications en base de donn√©es
      console.log('\n5Ô∏è‚É£ V√©rification des modifications en base de donn√©es...');
      const verifyResponse = await fetch('http://localhost:3000/api/attendance');
      
      if (verifyResponse.ok) {
        const updatedStudents = await verifyResponse.json();
        const updatedStudent = updatedStudents.find(s => s.student_id === testStudent.student_id);
        
        if (updatedStudent) {
          console.log('   ‚úÖ Donn√©es mises √† jour pour l\'√©tudiant:');
          console.log(`      S√©ances pay√©es: ${updatedStudent.paid_sessions || 0}`);
          console.log(`      S√©ances non pay√©es: ${updatedStudent.unpaid_sessions || 0}`);
          console.log(`      Total: ${(updatedStudent.paid_sessions || 0) + (updatedStudent.unpaid_sessions || 0)}`);
        } else {
          console.log('   ‚ùå √âtudiant non trouv√© dans les donn√©es mises √† jour');
        }
      } else {
        console.log('   ‚ùå Erreur lors de la v√©rification');
      }

      // 6. Test de validation (valeurs n√©gatives)
      console.log('\n6Ô∏è‚É£ Test de validation (valeurs n√©gatives)...');
      const invalidResponse = await fetch('http://localhost:3000/api/attendance', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          studentId: testStudent.student_id,
          action: 'set_paid_sessions',
          paidSessions: -1
        })
      });

      if (invalidResponse.status === 400) {
        const errorData = await invalidResponse.json();
        console.log('   ‚úÖ Validation correcte des valeurs n√©gatives');
        console.log(`      Message: ${errorData.error}`);
      } else {
        console.log('   ‚ö†Ô∏è Comportement inattendu pour les valeurs n√©gatives');
        console.log(`      Status: ${invalidResponse.status}`);
      }

      // 7. Test de validation (√©tudiant inexistant)
      console.log('\n7Ô∏è‚É£ Test de validation (√©tudiant inexistant)...');
      const fakeStudentResponse = await fetch('http://localhost:3000/api/attendance', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          studentId: 99999,
          action: 'set_paid_sessions',
          paidSessions: 5
        })
      });

      if (fakeStudentResponse.status === 500) {
        console.log('   ‚úÖ Gestion correcte de l\'√©tudiant inexistant');
      } else {
        console.log('   ‚ö†Ô∏è Comportement inattendu pour l\'√©tudiant inexistant');
        console.log(`      Status: ${fakeStudentResponse.status}`);
      }

      console.log('\n‚úÖ Test de modification des s√©ances termin√© !');
      console.log('\nüéØ R√©sum√© :');
      console.log('   ‚úÖ Modification des s√©ances pay√©es');
      console.log('   ‚úÖ Modification des s√©ances non pay√©es');
      console.log('   ‚úÖ Modification des deux types simultan√©ment');
      console.log('   ‚úÖ Validation des valeurs n√©gatives');
      console.log('   ‚úÖ Mise √† jour effective en base de donn√©es');
      console.log('\nüåê Interface √† v√©rifier :');
      console.log('   Admin Dashboard - Paiements: http://localhost:3000/dashboard/admin?tab=payments');

    } else {
      console.log('   ‚ùå Erreur lors de la r√©cup√©ration des √©tudiants');
      return;
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testModifySessions();
