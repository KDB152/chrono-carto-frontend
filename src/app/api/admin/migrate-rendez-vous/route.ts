import { NextRequest, NextResponse } from 'next/server';
import mysql from 'mysql2/promise';

// Configuration de la base de donn√©es MySQL
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'chrono_carto',
  port: parseInt(process.env.DB_PORT || '3306'),
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

// Fonction pour cr√©er une connexion √† la base de donn√©es
async function getConnection() {
  try {
    const connection = await mysql.createConnection(dbConfig);
    console.log('Connexion MySQL √©tablie avec succ√®s');
    return connection;
  } catch (error) {
    console.error('Erreur de connexion MySQL:', error);
    throw error;
  }
}

// POST - Ex√©cuter la migration
export async function POST(request: NextRequest) {
  try {
    console.log('üîß D√©but de la migration de la table rendez_vous');
    
    const connection = await getConnection();
    
    // 1. Ajouter les nouvelles colonnes
    console.log('üìù Ajout des nouvelles colonnes...');
    
    try {
      await connection.execute(`
        ALTER TABLE rendez_vous 
        ADD COLUMN IF NOT EXISTS child_id INT NULL AFTER parent_id
      `);
      console.log('‚úÖ Colonne child_id ajout√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è Colonne child_id d√©j√† pr√©sente ou erreur:', error);
    }
    
    try {
      await connection.execute(`
        ALTER TABLE rendez_vous 
        ADD COLUMN IF NOT EXISTS parent_id_int INT NULL AFTER parent_id
      `);
      console.log('‚úÖ Colonne parent_id_int ajout√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è Colonne parent_id_int d√©j√† pr√©sente ou erreur:', error);
    }
    
    // 2. Cr√©er les index
    console.log('üîç Cr√©ation des index...');
    
    try {
      await connection.execute(`
        CREATE INDEX IF NOT EXISTS idx_rendez_vous_child_id ON rendez_vous(child_id)
      `);
      console.log('‚úÖ Index sur child_id cr√©√©');
    } catch (error) {
      console.log('‚ö†Ô∏è Index sur child_id d√©j√† pr√©sent ou erreur:', error);
    }
    
    try {
      await connection.execute(`
        CREATE INDEX IF NOT EXISTS idx_rendez_vous_parent_id_int ON rendez_vous(parent_id_int)
      `);
      console.log('‚úÖ Index sur parent_id_int cr√©√©');
    } catch (error) {
      console.log('‚ö†Ô∏è Index sur parent_id_int d√©j√† pr√©sent ou erreur:', error);
    }
    
    // 3. Mettre √† jour les donn√©es existantes
    console.log('üîÑ Mise √† jour des donn√©es existantes...');
    
    // Mettre √† jour parent_id_int pour les rendez-vous existants
    const [updateResult] = await connection.execute(`
      UPDATE rendez_vous 
      SET parent_id_int = CAST(parent_id AS UNSIGNED) 
      WHERE parent_id_int IS NULL 
      AND parent_id REGEXP '^[0-9]+$'
    `);
    
    console.log('‚úÖ Mise √† jour des parent_id_int:', (updateResult as any).affectedRows, 'lignes');
    
    await connection.end();
    
    console.log('üéâ Migration termin√©e avec succ√®s');
    
    return NextResponse.json({
      success: true,
      message: 'Migration de la table rendez_vous termin√©e avec succ√®s',
      details: {
        columnsAdded: ['child_id', 'parent_id_int'],
        indexesCreated: ['idx_rendez_vous_child_id', 'idx_rendez_vous_parent_id_int'],
        dataUpdated: (updateResult as any).affectedRows
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la migration de la table rendez_vous' },
      { status: 500 }
    );
  }
}
